<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:context="http://www.springframework.org/schema/context" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd">
    <http:listener-config name="daas_experience_api-httpListenerConfig" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration" />
    <apikit:config name="daas_system_runner_api-config" raml="daas-system-runner-api.raml" consoleEnabled="false" doc:name="Router" keepRamlBaseUri="false" >
        <apikit:flow-mapping resource="/track" action="get" flow-ref="runnr_flow"/>
    </apikit:config>
    <http:request-config name="Runner_HTTP_Request_Configuration" host="${runner.http.host}" port="${runner.http.port}" basePath="${runner.http.basepath}" doc:name="HTTP Request Configuration" />
    <context:property-placeholder location="properties/daas-system-runner-api.properties,properties/daas-system-runner-api-${mule.env}.properties" />
    <flow name="daas-system-runner-api-main">
        <http:listener config-ref="daas_experience_api-httpListenerConfig" path="/*" doc:name="invoke daas  runner api" />
        <set-session-variable variableName="messageId" value="#[message.inboundProperties.messageId == null ? message.id : message.inboundProperties.messageId] " doc:name="Set Message Id"/>
        <apikit:router config-ref="daas_system_runner_api-config" doc:name="APIkit Router" />

        <exception-strategy ref="global-exception-Strategy" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="daas-system-runner-api-console">
        <http:listener config-ref="daas_experience_api-httpListenerConfig" path="/console/*" doc:name="HTTP" />
        <apikit:console config-ref="daas_system_runner_api-config" doc:name="APIkit Console" />
    </flow>

    <flow name="post:/daasproviders:application/json:daas_system_runner_api-config">
       <logger message="DAAS System Runner API Flow name is : #[mule:context.serviceName]" level="INFO" doc:name="Log Flow Name" />
        <message-properties-transformer doc:name="Message Properties" scope="invocation">
            <add-message-property key="vOperationType" value="#[message.inboundProperties.'http.query.params'.operationType]" />
            <add-message-property key="vDeliveryProviderName" value="#[message.inboundProperties.'http.query.params'.delivery_providername]" />
        </message-properties-transformer>
        <logger message="'The Query param operation_type is ' #[flowVars.vOperationType]  and delivery_providername is #[flowVars.vDeliveryProviderName] " level="INFO" doc:name="Log QueryParam" />
        <dw:transform-message doc:name="Transform Message" metadata:id="9bf2d1a6-3448-46a7-b1cb-70ec85550611">
            <dw:input-payload doc:sample="sample_data\json.json" />
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	pickup: {
		user: {
			name: payload.merchant_pickup_details.name,
			phone_no: payload.merchant_pickup_details.contact_no,
			external_id: payload.store_id,
			marchant: full_address: {
				address: payload.merchant_pickup_details.address.address1
++ payload.merchant_pickup_details.address.address2,
				city: {
					name: payload.merchant_pickup_details.address.city,
					geo: {
						latitude: payload.merchant_pickup_details.address.location.latitude,
						longitutde: payload.merchant_pickup_details.address.location.longitutde
					}
				}
			}
		}
	},
	drop: {
		user: {
			name: payload.customer_drop_details.name,
			phone_no: payload.customer_drop_details.contact_no,
			order_id: payload.customer_drop_details.customer_id,
			address: payload.customer_drop_details.address.address1
++ payload.customer_drop_details.address.address2,
			locality_name: payload.customer_drop_details.address.locality,
			city_name: payload.customer_drop_details.address.city
		}
	},
	order_details: {
		order_id: payload.orderDetails.order_id,
		order_value: payload.orderDetails.order_value as :string,
		amount_to_be_collected: payload.transactionDetails.to_be_collected,
		amount_to_be_paid: payload.transactionDetails.to_be_paid as :string,
		order_type: payload.orderDetails.order_type,
		order_items: payload.orderDetails.items map {
			quantity: $.quantity,
			price: $.price,
			item: {
				name: $.name
			}
		}
	},
	created_at: payload.login_user.created_datetime
}]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Check the Operation">
            <when expression="#[flowVars.vDeliveryProviderName == 'runnr' &amp;&amp; flowVars.vOperationType == 'create_shipment']">
                <flow-ref name="runner-create-shipment-subflow" doc:name="runner-create-shipment-subflow" />
            </when>
            <otherwise>
                <flow-ref name="runner-service-availablity-subflow" doc:name="runner-service-availablity-subflow" />
            </otherwise>
        </choice>
        <exception-strategy ref="global-exception-Strategy" doc:name="Reference Exception Strategy" />
    </flow>
    <sub-flow name="runner-create-shipment-subflow">
        <logger message="Sub Flow Name is: runner-create-shipment-subflow" level="INFO" doc:name="Log_subFlow" />
        <logger message="Payload before Invoke Runner Create Shipment  API--- #[payload]" level="INFO" doc:name="Log Payload" />
<!--         <http:request config-ref="Runner_HTTP_Request_Configuration" path="${runner.shipment.path}" method="${runner.shipment.method}" doc:name="Invoke Runner Create Shipment  API" />
 -->    </sub-flow>
    <sub-flow name="runner-service-availablity-subflow">
        <logger message="Sub Flow Name is: runner-service-availablity-subflow" level="INFO" doc:name="Log_subFlow" />
        <logger message="Payload before Invoke Runner Service Availablility API-- #[payload]" level="INFO" doc:name="Log Payload" />
<!--         <http:request config-ref="Runner_HTTP_Request_Configuration" path="${runner.service.availability.path}" method="${runner.service.availability.method}" doc:name="Invoke Runner Service Availablility API" />
 -->    </sub-flow>
     <flow name="runnr_flow">
        <set-variable variableName="operationType" value="#[message.inboundProperties.'http.query.params'.operationType]" doc:name="operationType"/>
        <choice doc:name="Route Based on OperationType">
            <when expression="#[flowVars.operationType=='track_order']">
                <flow-ref name="runnr_system_tracking_api_flow" doc:name="runnr_system_tracking_api_flow"/>
            </when>
            <otherwise>
                <flow-ref name="runnr_system_cancelling_api_flow" doc:name="runnr_system_cancelling_api_flow"/>
            </otherwise>
        </choice>
        <exception-strategy ref="global-exception-Strategy" doc:name="global-exception-Strategy"/>

    </flow>
    <flow name="runnr_system_tracking_api_flow">
        <logger message="Flow name: runnr_system_tracking_api_flow #[message.id]" level="INFO" doc:name="Log message"/>
        <set-variable variableName="orderId" value="#[message.inboundProperties.'http.query.params'.orderId]" doc:name="orderId"/>
        <logger message=" #[flowVars.orderId]" level="INFO" doc:name="orderId"/>
       <!--  <until-successful maxRetries="3" millisBetweenRetries="30000" doc:name="Until Successful" synchronous="true">
             <http:request config-ref="HTTP_Request_Configuration" path="/daasproviders" method="GET" doc:name="HTTP">
                 <http:request-builder>
                    <http:uri-param paramName="orderaId" value="#[flowVars.orderId]"/>
                 </http:request-builder>
             </http:request>
         </until-successful> -->
    </flow>
    <flow name="runnr_system_cancelling_api_flow">
        <logger message="flow name : runnr_system_cancelling_api_flow #[message.id]" level="INFO" doc:name="Log meassage"/>
        <set-variable variableName="orderId" value="#[message.inboundProperties.'http.query.params'.orderId]" doc:name="Variable"/>
        <logger message="#[flowVars.orderId]" level="INFO" doc:name="orderaid"/>
        <set-payload value="{ &quot;orderId&quot;: &quot;#[message.inboundProperties.'http.query.params'.orderId]&quot;, &quot;reason&quot;:  &quot;Delivery driver refused to come&quot;, &quot;notes&quot;:  &quot;Rider denying again and again&quot; }" doc:name="set_cancelling_payload"/>
        <logger message="#[payload]" level="INFO" doc:name="payload"/>
        <!-- <until-successful maxRetries="3" millisBetweenRetries="30000" doc:name="Until Successful" synchronous="true">
             <http:request config-ref="HTTP_Request_Configuration" path="/daasproviders" method="GET" doc:name="Invoke runnr target system">
                <http:request-builder>
                    <http:uri-param paramName="orderId" value="#[flowVars.orderId]"/>
                </http:request-builder>
             </http:request>
         </until-successful> -->
    </flow>

    
</mule>
